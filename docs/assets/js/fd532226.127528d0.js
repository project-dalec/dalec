"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5849],{6677:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"architecture","title":"Architecture","description":"","source":"@site/docs/architecture.mdx","sourceDirName":".","slug":"/architecture","permalink":"/dalec/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/project-dalec/dalec/blob/main/website/docs/architecture.mdx","tags":[],"version":"current","frontMatter":{"title":"Architecture"},"sidebar":"sidebar","previous":{"title":"Editor Support","permalink":"/dalec/editor-support"},"next":{"title":"Developer Guide","permalink":"/dalec/developers"}}');var r=s(4848),t=s(8453);function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dalec-architecture",children:"Dalec Architecture"})}),"\n",(0,r.jsx)(n.h2,{id:"goals-and-scope",children:"Goals and Scope"}),"\n",(0,r.jsxs)(n.p,{children:["Dalec provides a declarative workflow for building operating system packages and container images from a single spec. The repository couples a custom ",(0,r.jsx)(n.a,{href:"https://github.com/moby/buildkit",children:"BuildKit"})," frontend with distro-specific build logic, packaging templates, signing, and test automation. This document sketches the high-level architecture so maintainers and contributors understand how the moving parts fit together."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This document is a work in progress.\nIf you see a mistake or missing information please open an issue or ping us on ",(0,r.jsx)(n.a,{href:"https://cloud-native.slack.com/archives/C09MHVDGMAB",children:"Slack"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"system-view",children:"System View"}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart TB\n  classDef component fill:#0f172a,stroke:#1e293b,color:#e2e8f0,rx:6,ry:6,text-align:left;\n  classDef store fill:#111827,stroke:#1e293b,color:#f8fafc,rx:6,ry:6,text-align:left;\n\n  BKClient["BuildKit client<br/>(docker, buildx)"]:::component\n  BKDaemon["Buildkit Service<br/>(dockerd, buildkitd)"]:::component\n  Frontend["cmd/frontend (gRPC)<br/>- plugin loader<br/>- BuildMux router<br/>- subrequests"]:::component\n  Targets["targets / packaging<br/>- distro configs<br/>- package/image flow"]:::component\n  Core["dalec core package<br/>- spec parsing<br/>- source fetching<br/>- signing & tests APIs"]:::component\n\n  BKClient --\x3e BKDaemon\n  BKDaemon --\x3e BKClient\n  BKDaemon --\x3e Frontend\n  Frontend --\x3e BKDaemon\n  Frontend --\x3e Targets\n  Targets --\x3e Core\n  Core --\x3e BKDaemon'}),"\n",(0,r.jsx)(n.h2,{id:"runtime-components",children:"Runtime Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["BuildKit frontend (",(0,r.jsx)(n.code,{children:"cmd/frontend/main.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Runs inside BuildKit, exposes a gRPC service via ",(0,r.jsx)(n.code,{children:"grpcclient.RunFromEnvironment"}),", and handles build requests. Subcommands handle credential helper and test utilities reused in integration flows."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Frontend orchestration (",(0,r.jsx)(n.code,{children:"frontend/"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Implements spec loading (",(0,r.jsx)(n.code,{children:"build.go"}),"), request routing (",(0,r.jsx)(n.code,{children:"mux.go"}),"), BuildKit UI integration, signing hooks, and test execution. ",(0,r.jsx)(n.code,{children:"BuildMux"})," acts like an HTTP router: targets register handlers which later receive trimmed build target prefixes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Target plugins (",(0,r.jsx)(n.code,{children:"targets/"}),", ",(0,r.jsx)(n.code,{children:"packaging/"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Target-specific packages (Debian, Ubuntu, RPM variants, Windows) register ",(0,r.jsx)(n.code,{children:"gwclient.BuildFunc"})," handlers via a lightweight plugin framework (",(0,r.jsx)(n.code,{children:"internal/plugins"}),"). Each handler knows how to build distro packages, assemble container images, and, where relevant, system extensions."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Tooling commands (",(0,r.jsx)(n.code,{children:"cmd/*"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Helper binaries provide linting, schema generation, BuildKit worker matrices, registry retagging, and log conversion for CI. These commands run outside BuildKit."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Shared libraries (",(0,r.jsx)(n.code,{children:"dalec"}),", ",(0,r.jsx)(n.code,{children:"internal"}),", ",(0,r.jsx)(n.code,{children:"sessionutil"}),", ",(0,r.jsx)(n.code,{children:"pkg"}),")"]}),(0,r.jsx)(n.br,{}),"\n","The root Go module exposes the spec model, source handling, cache helpers, packaging utilities, and test support. Internal packages hide pluggable subsystems (",(0,r.jsx)(n.code,{children:"internal/plugins"}),", ",(0,r.jsx)(n.code,{children:"internal/testrunner"}),") from external consumers."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"build-orchestration-flow",children:"Build Orchestration Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BuildKit invokes the frontend"})," with a build context containing a Dalec spec (the spec is the effective ",(0,r.jsx)(n.code,{children:"Dockerfile"})," for the custom frontend)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"BuildMux"})," resolves the target"]}),": exact match, default handler, or prefix routing (e.g. ",(0,r.jsx)(n.code,{children:"mariner2/container"}),"). The matched handler sees the shortened target and a ",(0,r.jsx)(n.code,{children:"dalec.target"})," build option that identifies the active spec target stanza."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Specs load once per build"})," through ",(0,r.jsx)(n.code,{children:"LoadSpec"}),", which reads the spec from the Docker build context, merges build-arg substitutions (including derived platform arguments), and returns a ",(0,r.jsx)(n.code,{children:"*dalec.Spec"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"BuildWithPlatform"})," fans out per platform"]})," requested by the client, invoking a target handler for each architecture. Handler closures return an image reference and optional ",(0,r.jsx)(n.code,{children:"dalec.DockerImageSpec"})," metadata."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handlers construct LLB graphs"})," using helpers from the ",(0,r.jsx)(n.code,{children:"dalec"})," package to fetch sources, apply patches, run build steps, and generate artifacts (packages, root filesystems, signatures)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Results finalize"})," via BuildKit: container images are pushed or exported, packages and auxiliary files are returned as BuildKit outputs, and metadata is attached for the client."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"specification",children:"Specification"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Spec model (",(0,r.jsx)(n.code,{children:"spec.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Defines the declarative schema for packages: metadata, sources, patches, build steps, artifacts, target overrides, signing, tests, caching, image configuration, and changelog entries. YAML/JSON tags drive linting (",(0,r.jsx)(n.code,{children:"cmd/lint"}),") and schema generation (",(0,r.jsx)(n.code,{children:"cmd/gen-jsonschema"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Sources (",(0,r.jsx)(n.code,{children:"source.go"})," & ",(0,r.jsx)(n.code,{children:"source_*.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Support multiple backing stores (context tarball, Git, HTTP archives, Docker images, inline content, nested builds). ",(0,r.jsx)(n.code,{children:"SourceOpts"})," bundles the BuildKit resolver, credential helpers, and context readers. Generators (Go modules, Cargo, Pip) allow producing dependency caches from source trees."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Artifacts (",(0,r.jsx)(n.code,{children:"artifacts.go"}),", ",(0,r.jsx)(n.code,{children:"packaging/linux/*"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Represent build outputs such as OS packages, tarballs, and runtime sysext bundles. Targets interpret the spec\u2019s ",(0,r.jsx)(n.code,{children:"Artifacts"}),", ",(0,r.jsx)(n.code,{children:"PackageConfig"}),", and ",(0,r.jsx)(n.code,{children:"Image"})," sections to decide which packaging templates to apply."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Caches & accelerators (",(0,r.jsx)(n.code,{children:"cache.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Provide declarative cache mounts for generic directories, Go build caches, Rust ",(0,r.jsx)(n.code,{children:"sccache"}),", and Bazel caches. Options propagate platform and distro context into cache keys."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Signing (",(0,r.jsx)(n.code,{children:"request.go"}),", ",(0,r.jsx)(n.code,{children:"package_config.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"MaybeSign"})," stitches signing configuration pulled from spec or build context, optionally forwarding to external signing frontends. Build args such as ",(0,r.jsx)(n.code,{children:"DALEC_SKIP_SIGNING"})," and ",(0,r.jsx)(n.code,{children:"DALEC_SIGNING_CONFIG_PATH"})," control behavior."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"target-implementations-and-packaging",children:"Target Implementations and Packaging"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Plugin discovery (",(0,r.jsx)(n.code,{children:"cmd/frontend/plugin.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Auto-loads targets registered through ",(0,r.jsx)(n.code,{children:"targets/plugin/init.go"})," using the containerd ",(0,r.jsx)(n.code,{children:"plugin"})," graph. Only ",(0,r.jsx)(n.code,{children:"build-target"})," plugins are forwarded to the mux."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Distro contracts (",(0,r.jsx)(n.code,{children:"targets/linux/distro_handler.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Each distro implements a ",(0,r.jsx)(n.code,{children:"DistroConfig"})," interface covering validation, worker image selection, package build, package extraction, container assembly, and test execution. Common helper flows build packages once and reuse artifacts across container and sysext outputs."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Packaging templates (",(0,r.jsx)(n.code,{children:"packaging/linux/*"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Go templated assets render control files (Debian ",(0,r.jsx)(n.code,{children:"control"}),", RPM spec fragments, post-install scripts) using spec data. Generated scripts run inside BuildKit worker containers to produce ",(0,r.jsx)(n.code,{children:".deb"}),", ",(0,r.jsx)(n.code,{children:".rpm"}),", or sysext tarballs."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Windows support (",(0,r.jsx)(n.code,{children:"targets/windows"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Cross-compilation support builds Windows container images and packages while running on Linux workers, handling platform-specific artifact layout."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Caching and reuse (",(0,r.jsx)(n.code,{children:"targets/cache.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Targets detect pre-built packages supplied via BuildKit inputs and skip rebuilds when available, reducing rebuild cost in multi-stage workflows."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing-and-verification",children:"Testing and Verification"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Declarative tests (",(0,r.jsx)(n.code,{children:"Spec.Tests"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Tests attach to specs or per-target overrides. Steps describe commands, expected output, mounts, and file assertions."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Execution engine (",(0,r.jsx)(n.code,{children:"frontend/test_runner.go"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Orchestrates containerized test runs using BuildKit\u2019s LLB API, collects output in an embedded virtual filesystem (",(0,r.jsx)(n.code,{children:"frontend/pkg/bkfs"}),"), and reports structured errors with source mapping."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Reusable helpers (",(0,r.jsx)(n.code,{children:"internal/testrunner"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Implements subcommands invoked by the frontend (",(0,r.jsx)(n.code,{children:"testrunner.StepRunnerCmdName"}),", ",(0,r.jsx)(n.code,{children:"testrunner.CheckFilesCmdName"}),") and Go helpers used in unit tests. This keeps test logic identical between spec execution and CLI tooling."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Linting and schema checks (",(0,r.jsx)(n.code,{children:"cmd/lint"}),", ",(0,r.jsx)(n.code,{children:"cmd/gen-jsonschema"}),")"]}),(0,r.jsx)(n.br,{}),"\n","Enforce consistent YAML/JSON field usage, tag coverage, and schema drift between docs and code. CI runs these tools alongside ",(0,r.jsx)(n.code,{children:"go test"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"tooling-and-generated-assets",children:"Tooling and Generated Assets"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Generation commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cmd/gen-jsonschema"}),": emits the public JSON schema used by docs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cmd/gen-source-variants"}),": maintains the ",(0,r.jsx)(n.code,{children:"Source"})," union struct."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Utility commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cmd/retagger"}),": retags container images (used for publishing)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cmd/test2json2gha"}),": converts Go test JSON to GitHub Actions annotations."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Generated files live under ",(0,r.jsx)(n.code,{children:"_output/"})," (local builds) or ",(0,r.jsx)(n.code,{children:"docs/"})," (published schema & docs). Always run ",(0,r.jsx)(n.code,{children:"go generate ./..."})," after touching schema-affecting files."]}),"\n",(0,r.jsx)(n.h2,{id:"extensibility-paths",children:"Extensibility Paths"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Add a new target"}),(0,r.jsx)(n.br,{}),"\n","Create a package under ",(0,r.jsx)(n.code,{children:"targets/<platform>/<distro>"}),", implement ",(0,r.jsx)(n.code,{children:"DistroConfig"}),", and register it in ",(0,r.jsx)(n.code,{children:"targets/plugin/init.go"}),". Expose worker images, packaging steps, and tests tailored to the new distro."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Introduce a new source type or generator"}),(0,r.jsx)(n.br,{}),"\n","Extend the ",(0,r.jsx)(n.code,{children:"Source"})," type with a new field with type name that starts with ",(0,r.jsx)(n.code,{children:"Source"})," add the implementation under ",(0,r.jsx)(n.code,{children:"source_<type>.go"}),", and regenerate ",(0,r.jsx)(n.code,{children:"source_generated.go"})," (`go generate ./...)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Build-time integrations"}),(0,r.jsx)(n.br,{}),"\n","BuildKit subrequests handled in ",(0,r.jsx)(n.code,{children:"frontend/mux.go"})," (",(0,r.jsx)(n.code,{children:"frontend.dalec.resolve"}),", ",(0,r.jsx)(n.code,{children:"frontend.dalec.defaultPlatform"}),") illustrate how to add new metadata endpoints consumable via ",(0,r.jsx)(n.code,{children:"docker buildx --print"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"repository-layout-reference",children:"Repository Layout Reference"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cmd/"})," \u2013 entrypoints for the BuildKit frontend and tooling."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"frontend/"})," \u2013 build routing, spec resolution, test runner, request helpers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"targets/"})," \u2013 distro-specific build logic and plugin registration."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"packaging/"})," \u2013 template assets and helpers for OS package formats."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dalec"})," root files (",(0,r.jsx)(n.code,{children:"*.go"}),") \u2013 shared spec, sources, cache, artifact logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"internal/"})," \u2013 plugin wiring and test runner internals not exported publicly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sessionutil/"})," \u2013 helpers for BuildKit client sessions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"docs/"}),", ",(0,r.jsx)(n.code,{children:"website/"})," \u2013 published documentation and static site source."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test/"})," \u2013 integration suites exercising full BuildKit builds."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"This document is intentionally high-level; detailed API references live alongside code in package comments and GoDoc. Use it as a map when navigating the repository or planning new features."})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}const o={title:"Architecture"},l=void 0,a={},h=[{value:"Goals and Scope",id:"goals-and-scope",level:2},{value:"System View",id:"system-view",level:2},{value:"Runtime Components",id:"runtime-components",level:2},{value:"Build Orchestration Flow",id:"build-orchestration-flow",level:2},{value:"Specification",id:"specification",level:2},{value:"Target Implementations and Packaging",id:"target-implementations-and-packaging",level:2},{value:"Testing and Verification",id:"testing-and-verification",level:2},{value:"Tooling and Generated Assets",id:"tooling-and-generated-assets",level:2},{value:"Extensibility Paths",id:"extensibility-paths",level:2},{value:"Repository Layout Reference",id:"repository-layout-reference",level:2}];function u(e){return(0,r.jsx)(d,{})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u()}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);